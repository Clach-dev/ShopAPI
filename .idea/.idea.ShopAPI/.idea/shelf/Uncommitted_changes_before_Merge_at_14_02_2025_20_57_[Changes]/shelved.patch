Index: Infrastructure/Data/Configurations/RefreshTokenConfiguration.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Infrastructure/Data/Configurations/RefreshTokenConfiguration.cs b/Infrastructure/Data/Configurations/RefreshTokenConfiguration.cs
new file mode 100644
--- /dev/null	(date 1739555840656)
+++ b/Infrastructure/Data/Configurations/RefreshTokenConfiguration.cs	(date 1739555840656)
@@ -0,0 +1,23 @@
+using Domain.Entities;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Metadata.Builders;
+
+namespace Infrastructure.Data.Configurations;
+
+public class RefreshTokenConfiguration : IEntityTypeConfiguration<RefreshToken>
+{
+    public void Configure(EntityTypeBuilder<RefreshToken> builder)
+    {
+        builder
+            .HasKey(refreshToken => refreshToken.Token);
+
+        builder
+            .Property(refreshToken => refreshToken.ExpirationDate)
+            .IsRequired(true);
+        
+        builder
+            .HasOne(refreshToken => refreshToken.User)
+            .WithOne(user => user.RefreshToken)
+            .HasForeignKey<User>(user => user.RefreshTokenId);
+    }
+}
\ No newline at end of file
Index: Infrastructure/Data/Repositories/BaseRepository.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Infrastructure/Data/Repositories/BaseRepository.cs b/Infrastructure/Data/Repositories/BaseRepository.cs
new file mode 100644
--- /dev/null	(date 1739555840657)
+++ b/Infrastructure/Data/Repositories/BaseRepository.cs	(date 1739555840657)
@@ -0,0 +1,50 @@
+using System.Linq.Expressions;
+using Domain.Interfaces.IRepositories;
+
+namespace Infrastructure.Data.Repositories;
+
+public abstract class BaseRepository<TEntity> : IRepository<TEntity> where TEntity : class
+{
+    private readonly DbSet<TEntity> _entities;
+    
+    protected BaseRepository(LibraryDbContext context)
+    {
+        _entities = context.Set<TEntity>();
+    }
+    
+    public async Task<(IEnumerable<TEntity>, int)> GetAllAsync(
+        PageInfo pageInfo,
+        CancellationToken cancellationToken = default)
+    {
+        var entities = await _entities
+            .Skip((pageInfo.PageNumber - 1) * pageInfo.PageSize)
+            .Take(pageInfo.PageSize)
+            .ToListAsync(cancellationToken);
+        
+        var totalCount = await _entities.CountAsync(cancellationToken);
+
+        return (entities, totalCount);
+    }
+
+    public async Task<TEntity?> GetByIdAsync(Guid id, CancellationToken cancellationToken = default)
+    {
+        return await _entities.FindAsync(id, cancellationToken);
+    }
+
+    public async Task<IEnumerable<TEntity>> GetByPredicateAsync(
+        Expression<Func<TEntity, bool>> predicate,
+        CancellationToken cancellationToken = default)
+    {
+        return await _entities.Where(predicate).ToListAsync(cancellationToken);
+    }
+
+    public async Task CreateAsync(TEntity entity, CancellationToken cancellationToken = default)
+    {
+        await _entities.AddAsync(entity, cancellationToken);
+    }
+
+    public Task Delete(TEntity entity)
+    {
+        return Task.FromResult(_entities.Remove(entity));
+    }
+}
\ No newline at end of file
Index: Infrastructure/Data/Configurations/CategoryConfiguration.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Infrastructure/Data/Configurations/CategoryConfiguration.cs b/Infrastructure/Data/Configurations/CategoryConfiguration.cs
new file mode 100644
--- /dev/null	(date 1739555840654)
+++ b/Infrastructure/Data/Configurations/CategoryConfiguration.cs	(date 1739555840654)
@@ -0,0 +1,28 @@
+using Domain.Entities;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Metadata.Builders;
+
+namespace Infrastructure.Data.Configurations;
+
+public class CategoryConfiguration : IEntityTypeConfiguration<Category>
+{
+    public void Configure(EntityTypeBuilder<Category> builder)
+    {
+        builder
+            .HasKey(category => category.Id);
+        
+        builder.
+            Property(category => category.Name)
+            .HasMaxLength(50)
+            .IsRequired(true);
+        
+        builder
+            .Property(category => category.Description)
+            .HasMaxLength(300)
+            .IsRequired(false);
+        
+        builder
+            .HasMany(category => category.Products)
+            .WithMany(product => product.Categories);
+    }
+}
\ No newline at end of file
Index: Infrastructure/Data/Configurations/ProductConfiguration.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Infrastructure/Data/Configurations/ProductConfiguration.cs b/Infrastructure/Data/Configurations/ProductConfiguration.cs
new file mode 100644
--- /dev/null	(date 1739555840656)
+++ b/Infrastructure/Data/Configurations/ProductConfiguration.cs	(date 1739555840656)
@@ -0,0 +1,41 @@
+using Domain.Entities;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Metadata.Builders;
+
+namespace Infrastructure.Data.Configurations;
+
+public class ProductConfiguration : IEntityTypeConfiguration<Product>
+{
+    public void Configure(EntityTypeBuilder<Product> builder)
+    {
+        builder
+            .HasKey(product => product.Id);
+        
+        builder
+            .Property(product => product.Name)
+            .HasMaxLength(50)
+            .IsRequired(true);
+        
+        builder
+            .Property(product => product.Description)
+            .HasMaxLength(300)
+            .IsRequired(false);
+        
+        builder
+            .Property(product => product.Price)
+            .IsRequired(true);
+        
+        builder
+            .Property(product => product.Amount)
+            .IsRequired(true);
+
+        builder
+            .HasMany(product => product.Categories)
+            .WithMany(category => category.Products);
+
+        builder
+            .HasMany(product => product.OrderItems)
+            .WithOne(orderItem => orderItem.Product)
+            .HasForeignKey(orderItem => orderItem.ProductId);
+    }
+}
\ No newline at end of file
Index: Infrastructure/Data/Configurations/OrderConfiguration.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Infrastructure/Data/Configurations/OrderConfiguration.cs b/Infrastructure/Data/Configurations/OrderConfiguration.cs
new file mode 100644
--- /dev/null	(date 1739555840655)
+++ b/Infrastructure/Data/Configurations/OrderConfiguration.cs	(date 1739555840655)
@@ -0,0 +1,35 @@
+using Domain.Entities;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Metadata.Builders;
+
+namespace Infrastructure.Data.Configurations;
+
+public class OrderConfiguration : IEntityTypeConfiguration<Order>
+{
+    public void Configure(EntityTypeBuilder<Order> builder)
+    {
+        builder
+            .HasKey(order => order.Id);
+        
+        builder
+            .Property(order => order.TotalPrice)
+            .IsRequired(true);
+
+        builder
+            .Property(order => order.Status)
+            .IsRequired(true);
+
+        builder
+            .Property(order => order.DeliveryDate)
+            .IsRequired(true);
+
+        builder
+            .HasOne(order => order.User)
+            .WithMany(user => user.Orders);
+        
+        builder
+            .HasMany(order => order.OrderItems)
+            .WithOne(orderItem => orderItem.Order)
+            .HasForeignKey(orderItem => orderItem.OrderId);
+    }
+}
\ No newline at end of file
Index: Infrastructure/Data/Configurations/OrderItemConfiguration.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Infrastructure/Data/Configurations/OrderItemConfiguration.cs b/Infrastructure/Data/Configurations/OrderItemConfiguration.cs
new file mode 100644
--- /dev/null	(date 1739555840655)
+++ b/Infrastructure/Data/Configurations/OrderItemConfiguration.cs	(date 1739555840655)
@@ -0,0 +1,26 @@
+using Domain.Entities;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Metadata.Builders;
+
+namespace Infrastructure.Data.Configurations;
+
+public class OrderItemConfiguration : IEntityTypeConfiguration<OrderItem>
+{
+    public void Configure(EntityTypeBuilder<OrderItem> builder)
+    {
+        builder
+            .HasKey(orderItem => orderItem.Id);
+
+        builder
+            .Property(orderItem => orderItem.Amount)
+            .IsRequired(true);
+        
+        builder
+            .HasOne(orderItem => orderItem.Order)
+            .WithMany(order => order.OrderItems);
+        
+        builder
+            .HasOne(orderItem => orderItem.Product)
+            .WithMany(product => product.OrderItems);
+    }
+}
\ No newline at end of file
Index: Infrastructure/Data/Configurations/UserConfiguration.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Infrastructure/Data/Configurations/UserConfiguration.cs b/Infrastructure/Data/Configurations/UserConfiguration.cs
new file mode 100644
--- /dev/null	(date 1739555840656)
+++ b/Infrastructure/Data/Configurations/UserConfiguration.cs	(date 1739555840656)
@@ -0,0 +1,59 @@
+using Domain.Entities;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Metadata.Builders;
+
+namespace Infrastructure.Data.Configurations;
+
+public class UserConfiguration : IEntityTypeConfiguration<User>
+{
+    public void Configure(EntityTypeBuilder<User> builder)
+    {
+        builder
+            .HasKey(user => user.Id);
+
+        builder
+            .Property(user => user.PhoneNumber)
+            .IsRequired(true);
+
+        builder
+            .Property(user => user.Password)
+            .IsRequired(true);
+
+        builder
+            .Property(user => user.LastName)
+            .HasMaxLength(50)
+            .IsRequired(true);
+        
+        builder
+            .Property(user => user.FirstName)
+            .HasMaxLength(50)
+            .IsRequired(true);
+        
+        builder
+            .Property(user => user.MiddleName)
+            .HasMaxLength(50)
+            .IsRequired(false);
+
+        builder
+            .Property(user => user.BirthDate)
+            .IsRequired(false);
+
+        builder
+            .Property(user => user.Email)
+            .HasMaxLength(50)
+            .IsRequired(false);
+
+        builder
+            .Property(user => user.Role)
+            .IsRequired(true);
+        
+        builder.
+            HasMany(user => user.Orders)
+            .WithOne(order => order.User)
+            .HasForeignKey(order => order.UserId);
+
+        builder
+            .HasOne(user => user.RefreshToken)
+            .WithOne(refreshToken => refreshToken.User);    
+    }
+}
\ No newline at end of file
